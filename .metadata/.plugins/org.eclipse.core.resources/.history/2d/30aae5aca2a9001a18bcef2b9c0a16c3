package com.restfull.app.exception.response;

import java.util.Date;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import com.restfull.app.exception.UserNotFoundException;

@ControllerAdvice
@RestController
public class CustomizedResponseEntityHandler  extends ResponseEntityExceptionHandler{

	@ExceptionHandler(Exception.class)
	public final ResponseEntity<Object> handleAllException(Exception ex, WebRequest request)  {
		ExceptionResponse excepResponse= 
				new ExceptionResponse(new Date(), request.getDescription(false) , ex.getMessage());
		
		return new ResponseEntity(excepResponse, HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	@ExceptionHandler(UserNotFoundException.class)
	public final ResponseEntity<Object> handleAllUserNotFoundException(Exception ex, WebRequest request)  {
		ExceptionResponse excepResponse= 
				new ExceptionResponse(new Date(), request.getDescription(false) , ex.getMessage());
		
		return new ResponseEntity(excepResponse, HttpStatus.NOT_FOUND);
	}
	
	@Override
	protected ResponseEntity<Object> handleMethodArgumentNotValid(
			MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {
		ExceptionResponse excepResponse= 
				new ExceptionResponse(new Date(), request.getDescription(false) , ex.getBindingResult().toString());
		return handleExceptionInternal(ex, null, headers, status, request);
	}
}
